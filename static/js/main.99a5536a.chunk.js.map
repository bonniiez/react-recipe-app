{"version":3,"sources":["RecipeDetails.js","Recipe.js","Home.js","serviceWorker.js","index.js"],"names":["RecipeDetails","eachRecipe","recipe","recipeIndex","ingredients","healthLabelString","healthLabels","join","dailyValue","totalDaily","ENERC_KCAL","quantity","yield","recipeCaloriesPerServing","calories","nutritionVal","digest","useState","isToggleSub","setToggleSub","console","log","className","src","image","alt","label","map","item","index","key","text","Number","toFixed","Math","round","value","onClick","e","preventDefault","toggleSub","macro","total","daily","sub","subs","style","color","href","url","CaptionBanner","styled","div","Recipe","isRecipeDetails","setRecipeDetails","setRecipeIndex","setEachRecipe","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","updateSearch","target","getSearch","onSubmit","type","onChange","placeholder","handleRecipeDetails","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99a5536a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n\n\nconst RecipeDetails = ({ eachRecipe, recipeIndex }) => {\n    var recipe = eachRecipe.recipe;\n    var ingredients = recipe.ingredients;\n    const healthLabelString = recipe.healthLabels.join(', ');\n    const dailyValue = recipe.totalDaily.ENERC_KCAL.quantity / recipe.yield;\n    const recipeCaloriesPerServing = recipe.calories / recipe.yield;\n    const nutritionVal = recipe.digest;\n    var [isToggleSub, setToggleSub] = useState(false);\n\n    console.log(recipe);\n    console.log(\"calories per serving:\", recipeCaloriesPerServing);\n\n    const toggleSub = (e) => {\n        e.preventDefault();\n        // console.log(\"target: \",e.target);\n        setToggleSub(!isToggleSub);\n    }\n\n    const displaySub = (subs) => {\n        console.log(\"macro: \", subs);\n        return (\n            <div className=\"macro-sub-container\" >\n                {subs.map(sub => (\n                    <span >\n                        {isToggleSub ?\n                            <div className=\"macro-sub-collapsible-toggle\" style={{ color: \"red\" }}>\n                                <span className=\"macro-label\">{sub.label}</span>\n                                <span className=\"macro-grams\">{Number(sub.total / recipe.yield).toFixed(2)}g</span>\n                                <span className=\"macro-percentage\">{Math.round(sub.daily / recipe.yield, 1)}%</span>\n                            </div> : <div className=\"macro-sub-none\"></div>}\n\n                    </span>\n\n                ))}\n            </div>\n        )\n    }\n\n    return (\n\n        <div className=\"recipe-details-container\">\n            <header className=\"recipe-details-header\">\n                <div className=\"recipe-details-image\">\n                    <img src={recipe.image} alt={recipe.label} />\n                </div>\n                <div className=\"recipe-details-header-content\">\n                    <h2 className=\"recipe-details-title\">{recipe.label}</h2>\n                    <hr />\n                    <div className=\"recipes-details-rating\"></div>\n                    <div className=\"recipes-details-details\">\n\n                    </div>\n                </div>\n\n            </header>\n            <div className=\"recipe-details-content\">\n                <div className=\"recipe-details-content-ingredients\">\n                    <h3>Ingredients</h3>\n                    <ul className=\"recipes-details-ingredients-list\">\n                        {ingredients.map((item, index) => {\n                            return <li key={index}>{item.text}</li>;\n                        })}\n                    </ul>\n                </div>\n                <div className=\"recipe-details-content-nutrition\">\n                    <h3>Nutritional Information</h3>\n                    <ul className=\"recipes-details-list\">\n                        <li className=\"recipe-detail-calories\">\n                            <span>{Number(recipeCaloriesPerServing).toFixed(2)} CALORIES / SERVING</span>\n                        </li>\n                        <li>\n                            <span>{Math.round(dailyValue, 1)}% DAILY VALUE</span>\n                        </li>\n                        <li className=\"recipe-detail-healthlabels\">\n                            <span>{healthLabelString} </span>\n                        </li>\n                        <li className=\"recipe-detail-yield\">\n                            <span><input value={recipe.yield} /> SERVINGS </span>\n                        </li>\n                    </ul>\n\n                    <div>\n                        <button className=\"expand-all-nutrition\" onClick={(e) => toggleSub(e)}> expand all</button>\n                        {nutritionVal.map((macro, index) => (\n                            <div className=\"macro-sub-collapsible\" >\n                                <div className=\"macro-sub-collapsed\" key={index}>\n                                    <span className=\"macro-label\" >{macro.label} </span>\n                                    <span className=\"macro-grams\">{Number(macro.total / recipe.yield).toFixed(2)}g </span>\n                                    <span className=\"macro-percentage\">{Math.round(macro.daily / recipe.yield, 1)}%</span>\n                                </div>\n                                <div className=\"macro-sub-expanded\">\n                                    {macro.sub && macro.sub !== null ? displaySub(macro.sub) : null}\n                                </div>\n                            </div>\n\n                            // (macro.sub && macro.sub !== null) ?\n                            //     <div className=\"macro-sub-collapsible\" >\n                            //         <div className=\"macro-sub-collapsed\" key={index}\n                            //         >\n                            //             <span className=\"macro-label\" >{macro.label} </span>\n                            //             <span className=\"macro-grams\">{Number(macro.total / recipe.yield).toFixed(2)}g </span>\n                            //             <span className=\"macro-percentage\">{Math.round(macro.daily / recipe.yield, 1)}%</span>\n                            //         </div><div className=\"macro-sub-expanded\">\n                            //             {displaySub(macro)}\n                            //         </div>\n                            //     </div> :\n                            //     <div className=\"macro-basic\">\n                            //         <span className=\"macro-label\">{macro.label}</span>\n                            //         <span className=\"macro-grams\">{Number(macro.total / recipe.yield).toFixed(2)}g </span>\n                            //         <span className=\"macro-percentage\">{Math.round(macro.daily / recipe.yield, 1)}%</span>\n                            //     </div>\n\n\n                        ))}\n                    </div>\n                </div>\n\n\n            </div>\n            <a href={recipe.url}><div className=\"recipe-link-container\"> click here for full recipe </div></a>\n\n\n        </div>\n    )\n}\nexport default RecipeDetails;\n","import React, { useState, useEffect } from 'react';\n// import {Link} from 'react-router-dom';\nimport styled from 'styled-components';\nimport RecipeDetails from \"./RecipeDetails\";\n\n\nconst CaptionBanner = styled.div`\n    &:hover{\n        background: #723f5f;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        opacity: 1;\n        color: #fff;\n        font-family: 'Dosis',sans-serif;\n        font-size: 22px;\n        line-height: 1;\n        height: 94px;\n        overflow: hidden;\n        text-align: center;\n        text-transform: lowercase;\n    }\n`;\n\n\n\n\n\nconst Recipe = () => {\n    var [isRecipeDetails, setRecipeDetails] = useState(false);\n    var [recipeIndex, setRecipeIndex] = useState(0);\n    var [eachRecipe, setEachRecipe] = useState('');\n\n    var handleRecipeDetails = (eachRecipe, recipeIndex) => {\n        setRecipeDetails(true);\n        setRecipeIndex(recipeIndex);\n        setEachRecipe(eachRecipe);\n    }\n\n    const [recipes, setRecipes] = useState([]);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState('chicken');\n\n\n    const APP_ID = 'f7be027e';\n    const APP_KEY = '38555891ce91633ed9569bbda9c382b4';\n\n\n    useEffect(() => {\n        getRecipes();\n    }, [query]); // only run getRecipe when query is submited \n\n    const getRecipes = async () => {\n        const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n        const data = await response.json();\n        setRecipes(data.hits)\n    }\n\n    const updateSearch = (e) => {\n        setSearch(e.target.value);\n    }\n\n    const getSearch = e => {\n        e.preventDefault();\n        setQuery(search);\n        console.log(\"get search\", search);\n        setSearch('');\n\n    }\n\n    const displaySearchBar = () => {\n        return (\n            <form onSubmit={getSearch} className=\"search-form\">\n                <input className=\"search-bar\" value={search} type=\"textbox\" onChange={updateSearch} placeholder=\"Enter an ingredient or a dish name\"/>\n                <button\n                    className=\"search-button\"\n                    type=\"submit\">\n                    Search\n        </button>\n            </form>\n        )\n    }\n\n\n\n    return (\n        <div className=\"recipe-wrap\">\n            <div className=\"content-sidebar-wrap flex-container\">\n                {isRecipeDetails ?\n                    <div>\n                        <RecipeDetails\n                            eachRecipe={eachRecipe}\n                            recipeIndex={recipeIndex} />\n                    </div> :\n                    <div >\n                        {displaySearchBar()}\n                        <div className=\"main-content-wrap flex-container\">\n                        {recipes.map((recipe, index) => (\n                            <main className=\"main-content\"  key={index}>\n                                <article  className=\"entry-article\" >\n                                    <button onClick={() => handleRecipeDetails(recipe, index)}>\n                                        <img src={recipe.recipe.image} alt=\"\" />\n                                    </button>\n                                    <CaptionBanner>\n                                        <div className=\"caption\">\n                                            <span className=\"subtitle\">{recipe.recipe.label}</span>\n                                        </div>\n                                    </CaptionBanner>\n\n                                </article>\n                            </main>\n\n                        )\n                        )}\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Recipe;\n","import React from 'react';\nimport './App.css';\nimport Recipe from \"./Recipe\";\n\n\n\nfunction Home() {\n\n\n  return (\n    <div className=\"Home\">\n    \n      <div className=\"app-container\">\n        <Recipe />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}